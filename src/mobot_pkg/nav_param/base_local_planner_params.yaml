# controller_frequency: 5
# planner_frequency: 1

TrajectoryPlannerROS:
  # Maximum and minimum velocities in the x-direction (forward).
  max_vel_x: 0.15
  min_vel_x: 0.07

  # Maximum rotation velocity and minimum in-place rotation velocity.
  max_vel_theta: .5
  #min_vel_theta: -0.05  # Uncomment to set a minimum rotational velocity, if necessary.
  min_in_place_vel_theta: 0.5

  # Acceleration limits for rotation and linear movement.
  acc_lim_theta: 0.6  # Acceleration limit for angular velocity.
  acc_lim_x: 0.6      # Acceleration limit for linear velocity in the x-direction.
  acc_lim_Y: 0.6      # Acceleration limit for linear velocity in the y-direction (typo, should be lowercase 'y').

  # Specifies if the robot is holonomic (true) or non-holonomic (false).
  holonomic_robot: true
  
  # Maximum and minimum velocities in the y-direction (sideways).
  max_vel_y: 0.15
  min_vel_y: 0.07

  # Predefined velocities in the y-direction for exploration.
  y_vels: [-1.0, -1.1, -1.2, 0, 1.2, 1.1, 1.0]

  # If true, scoring is based on meters rather than cells.
  meter_scoring: true

  # Tolerance values for reaching a goal - both position (xy) and orientation (yaw).
  xy_goal_tolerance: 0.2  # Allowed positional error in meters.
  yaw_goal_tolerance: 0.4 # Allowed orientation error in radians.

  # Sampling parameters for generating velocity samples in x, y, and theta.
  vx_samples: 10   # Number of samples for linear velocity in the x-direction.
  vy_samples: 5    # Number of samples for linear velocity in the y-direction.
  vtheta_samples: 10 # Number of samples for angular velocity.

  # Control loop frequency for the local planner.
  controller_frequency: 5.0

  # Enables Dynamic Window Approach for trajectory planning.
  dwa: true


  
  # acc_lim_x: 0.5
  # acc_lim_theta:  0.5
  # max_vel_x: 0.17
  # min_vel_x: 0.11
  # max_vel_theta: 0.11
  # min_vel_theta: 0.075
  # max_in_place_vel_theta: 0.11
  # min_in_place_vel_theta: 0.075
  # holonomic_robot: false
  # escape_vel: -0.1
  # Goal Tolerance Parameters
  # yaw_goal_tolerance: 0.15
  # xy_goal_tolerance: 0.15
  # latch_xy_goal_tolerance: true
  # # Forward Simulation Parameters
  # sim_time: 1
  # sim_granularity: 0.02
  # angular_sim_granularity: 0.02
  
  # vtheta_samples: 25
  # controller_frequency: 20.0
  # # Trajectory scoring parameters
  # meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that 
  # goal_distance and  path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  # occdist_scale:  0.2 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
  # pdist_scale: 1.5  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
  # gdist_scale: 1.5 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8
  # heading_lookahead: 0.1  #How far to look ahead in meters when scoring different in-place-rotation trajectories
  # heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
  # heading_scoring_timestep: 0.4   #How far to look ahead in time in seconds along the simulated trajectory when using   heading scoring
  # dwa: false #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  # simple_attractor: false
  # publish_cost_grid_pc: true  
  # # Oscillation Prevention Parameters
  # oscillation_reset_dist: 0.1 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  # escape_reset_dist: 0.2
  # escape_reset_theta: 0.2